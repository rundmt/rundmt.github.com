<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Derek Tor Website</title>
    <description>Personal Website of Derek Tor. Full Stack Web Developer. IOS Developer.
</description>
    <link>http://derektor.me/</link>
    <atom:link href="http://derektor.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 08 Apr 2016 09:59:26 -0700</pubDate>
    <lastBuildDate>Fri, 08 Apr 2016 09:59:26 -0700</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>jQuery attaching events document.on vs document.ready</title>
        <description>&lt;p&gt;jQuery makes javascript very easy for beginners to grasp. However, there are a few things that can trip up newbies when it comes to event attaching. I’ve experienced this first hand when I was new, and I’ve experienced this when teaching others about jQuery.&lt;/p&gt;

&lt;h3 id=&quot;basic-form&quot;&gt;Basic Form&lt;/h3&gt;

&lt;p&gt;When you first start learning jQuery, we learn to add events like this.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/rundmt/1e2014821f770977faf69f779b123e34.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice how the event for &lt;code class=&quot;highlighter-rouge&quot;&gt;.add-input&lt;/code&gt; is inside &lt;code class=&quot;highlighter-rouge&quot;&gt;document.ready()&lt;/code&gt;. This means that once the document is ready we will attach a event click listener to &lt;code class=&quot;highlighter-rouge&quot;&gt;.add-input&lt;/code&gt;.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;oxpGeJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;derektorq&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/derektorq/pen/oxpGeJ/&quot;&gt;Jquery Event Example&lt;/a&gt; by Derek Tor (&lt;a href=&quot;http://codepen.io/derektorq&quot;&gt;@derektorq&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This code works fine in most cases, but what happens if an element is added after &lt;code class=&quot;highlighter-rouge&quot;&gt;document.ready()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-form-naive-example&quot;&gt;Dynamic Form (Naive Example)&lt;/h3&gt;

&lt;p&gt;Let’s take a simple example of making a dynamic form. Say we’re making an app and we want to add inputs to our form.&lt;/p&gt;

&lt;p&gt;In the example below we have the basic form example from before, with and extra button. When the new “+” button is clicked it will append an input to the form creating a form with multiple inputs. However, the problem is the newly generated input buttons don’t work the same way as the first button.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/rundmt/2125be3eb95c983be6cea110087c4018.js&quot;&gt;&lt;/script&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;aNbYxx&quot; data-default-tab=&quot;result&quot; data-user=&quot;derektorq&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/derektorq/pen/aNbYxx/&quot;&gt;Jquery Event Example 1&lt;/a&gt; by Derek Tor (&lt;a href=&quot;http://codepen.io/derektorq&quot;&gt;@derektorq&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Try clicking the “Add Input” button of a newly generated input, in the Codepen above.&lt;/p&gt;

&lt;p&gt;Here’s where things get tricky.&lt;/p&gt;

&lt;p&gt;This code above says add a click event listener to the &lt;code class=&quot;highlighter-rouge&quot;&gt;add-input&lt;/code&gt; class. However since the new elements are added after the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).ready()&lt;/code&gt; the events for &lt;code class=&quot;highlighter-rouge&quot;&gt;$(&#39;.add-input&#39;).click()&lt;/code&gt; never get called again after the first &lt;code class=&quot;highlighter-rouge&quot;&gt;ready()&lt;/code&gt; event.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-form-callback-example&quot;&gt;Dynamic Form (Callback Example)&lt;/h3&gt;

&lt;p&gt;To fix problem we must attach our event listeners in the callback when we click the “+” button. So now every single time an input gets added it will also add &lt;code class=&quot;highlighter-rouge&quot;&gt;click()&lt;/code&gt; event to it as well. Unfortunately this comes with it’s own problems.&lt;/p&gt;

&lt;p&gt;Since we’re adding an event for every input we add, we are also re-adding the event listeners for every button resulting in multiple events.&lt;/p&gt;

&lt;p&gt;To stop this we must add &lt;code class=&quot;highlighter-rouge&quot;&gt;$(&quot;.add-input&quot;).unbind( &quot;click&quot; );&lt;/code&gt;. This allows us to remove all previous events that were attached. This leaves us with a single click event for each input button.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/rundmt/d94551175e0b43c85dcd0faa47e4c535.js&quot;&gt;&lt;/script&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;bpaoLe&quot; data-default-tab=&quot;result&quot; data-user=&quot;derektorq&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/derektorq/pen/bpaoLe/&quot;&gt;jQuery Event Callback Example&lt;/a&gt; by Derek Tor (&lt;a href=&quot;http://codepen.io/derektorq&quot;&gt;@derektorq&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Our code for what should be a simple dynamic form has grown into a mess. It is complex to say the least with all of the adding and removing of events. Imagine if we had a much more complex form, the code would leave us in &lt;a href=&quot;http://callbackhell.com/&quot;&gt;callback hell&lt;/a&gt;. Luckily there is a better way.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-form-documenton-example&quot;&gt;Dynamic Form ($(document).on Example)&lt;/h3&gt;

&lt;p&gt;As of jQuery 1.7, we now have the &lt;code class=&quot;highlighter-rouge&quot;&gt;.on()&lt;/code&gt; method. &lt;code class=&quot;highlighter-rouge&quot;&gt;on()&lt;/code&gt; is nifty, because it keeps track of the document even as we dynamically add inputs. With &lt;code class=&quot;highlighter-rouge&quot;&gt;on()&lt;/code&gt; there is no need for adding complex callback code. We don’t need to remove events only to add them back right after.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/rundmt/c7f8ce31935a7655dedcf0b0aa75eeae.js&quot;&gt;&lt;/script&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ONzxwN&quot; data-default-tab=&quot;result&quot; data-user=&quot;derektorq&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/derektorq/pen/ONzxwN/&quot;&gt;jQuery Event $(document).on Example&lt;/a&gt; by Derek Tor (&lt;a href=&quot;http://codepen.io/derektorq&quot;&gt;@derektorq&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We get the same result, but the resulting code is so much cleaner. No matter how many inputs we add, the code works without any problems.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).ready()&lt;/code&gt; is a great function to call when things the DOM is ready, but beginners can’t rely on it for everything. &lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).on()&lt;/code&gt; is fantastic for adding event listeners, because it listens for any selector added on the document no matter when it is added.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Apr 2016 02:45:00 -0700</pubDate>
        <link>http://derektor.me/jquery/events/2016/04/07/jquery-document-on.html</link>
        <guid isPermaLink="true">http://derektor.me/jquery/events/2016/04/07/jquery-document-on.html</guid>
        
        
        <category>jQuery</category>
        
        <category>events</category>
        
      </item>
    
      <item>
        <title>Using Postman and Clarifai to tag photos</title>
        <description>&lt;p&gt;I’m going to go through as basic introduction of two of my favorite things. One is a Postman a graphical API client, and the other is Clarifai a image and video tagging service that allow us to quickly get information on our content. If you prefer videos I’ve made one down below.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iJMxg-mcZXE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Google Chrome&lt;/li&gt;
  &lt;li&gt;Postman&lt;/li&gt;
  &lt;li&gt;Clarifai Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-clarifai&quot;&gt;What is Clarifai?&lt;/h2&gt;

&lt;p&gt;Clarifai is a company that offers image tagging as a service. You send them an image or a link to an image and they give you back image tags.&lt;/p&gt;

&lt;h2 id=&quot;what-is-postman&quot;&gt;What is Postman?&lt;/h2&gt;

&lt;p&gt;Postman is a tool that allows us to send requests to API services like Clarifai. It’s a very nice way to get up and running. The standard way of using CURL commands is hard and not very efficient. With Postman we get things like history, saved API calls, and a beautiful interface.&lt;/p&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;/h2&gt;

&lt;h3 id=&quot;clarifai&quot;&gt;Clarifai&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://developer.clarifai.com/&quot;&gt;Clarifai’s developer portal&lt;/a&gt; and sign up. Once you’ve signed up we need to create an application. Go and click “Application” on the right hand side.
You should see a page like this.&lt;/p&gt;

&lt;p&gt;Click on “Create a new Application”. Go ahead and create an application. It doesn’t matter what you name it. Leave the other selections alone and click “Create Application.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SnW3lmf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NTo8rXH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next go and click “Generate Access Token”. You should see some randomized letters show up next to it. That is your access token save it some place, or just don’t close your tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/H2GVjUP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;postman&quot;&gt;Postman&lt;/h3&gt;

&lt;p&gt;If you’ve ever used an API doc before you typically see something like this. In the black boxes those are what are known as CURL commands. CURL commands are commands to communicate with the web from your computers command line. CURL commands are great, but they are pretty daunting for somebody not used to the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bKzI8l2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s why for this tutorial we’re going to use Postman. Postman is a tool for users to interact with APIs using a graphical interface. You can download Postman in the chrome store. &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon&quot;&gt; Link&lt;/a&gt;. Go ahead and add it.&lt;/p&gt;

&lt;p&gt;Now if you go to your Chrome apps you can see Postman. Go ahead and open it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qgEEQRW.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-request&quot;&gt;The Request&lt;/h2&gt;

&lt;p&gt;Alright Clarifai gives us two options for tagging photos, but we will use the basic POST request API. If you don’t know what the difference between a POST and GET request are, it is not a big deal. A POST request basically sends data outside of the URL and a GET sends data with the url.&lt;/p&gt;

&lt;p&gt;So to the left of the url you will see something that says “GET”. Click it and select POST instead.&lt;/p&gt;

&lt;p&gt;To set it up in Postman put in the url  https://api.clarifai.com/v1/tag/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rNvrsxc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the headers tab place your authorization token like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bPoArNF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next click the body tag and put input url in the key and for the value put in a url to an image. We’ll use http://www.clarifai.com/img/metro-north.jpg&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NY2rH0D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All we have to do left is hit send. You should see a response in the box below with data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/VcKv6ki.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Postman allows us to quickly test APIs in a very nice and quick manner. I personally use it for building and testing my own APIs. This tutorial is a quick one to get somebody up and running. I could see somebody using Postman along with Clarifai’s feedback API. Their feedback API allows for the correction of tags. I would much rather use a nice interface like Postman than CURL calls for tasks like that.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2016 04:56:37 -0800</pubDate>
        <link>http://derektor.me/clarifai/api/postman/2016/02/10/clarifai-postman.html</link>
        <guid isPermaLink="true">http://derektor.me/clarifai/api/postman/2016/02/10/clarifai-postman.html</guid>
        
        
        <category>clarifai</category>
        
        <category>api</category>
        
        <category>postman</category>
        
      </item>
    
      <item>
        <title>First Post</title>
        <description>&lt;p&gt;So I just made this Jekyll blog. I’ll be posting things here from now on. You can still look at my older posts &lt;a href=&quot;http://derekcodes.tumblr.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2015 08:56:37 -0700</pubDate>
        <link>http://derektor.me/jekyll/update/2015/05/28/first-post.html</link>
        <guid isPermaLink="true">http://derektor.me/jekyll/update/2015/05/28/first-post.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
